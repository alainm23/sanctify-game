[gd_resource type="VisualShader" load_steps=17 format=3 uid="uid://bn3hn2vy1eg2u"]

[sub_resource type="VisualShaderNodeMultiplyAdd" id="VisualShaderNodeMultiplyAdd_q1fya"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0, 0, 0)]
op_type = 2

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_7sxjs"]
operator = 2

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_06sln"]
input_name = "uv"

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_7ek7e"]
parameter_name = "ground_albedo"
default_value_enabled = true
default_value = Color(0.639216, 0.564706, 0.486275, 1)

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_li40x"]
operator = 2

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_oh0m8"]
constant = 0.75

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_jjd2o"]
parameter_name = "uv_scale"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_fs3ge"]
input_name = "node_position_world"

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_fqepy"]
parameter_name = "distribution_noise"
texture_type = 1
texture_repeat = 1

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_q1crb"]
default_input_values = [0, Vector2(0, 0), 1, Vector2(0, 0)]
op_type = 0

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_4oe1r"]
default_input_values = [0, Vector2(0, 0), 1, Vector2(0, 0)]
op_type = 0
operator = 2

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_cbhvb"]
constant = 0.5

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_7s863"]
parameter_name = "albedo_color"
default_value_enabled = true

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_ny8ov"]
parameter_name = "grass_albedo"
default_value_enabled = true
default_value = Color(0.227451, 0.568627, 0.0156863, 1)

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_gpugy"]
expanded_output_ports = [0]
source = 5

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_l2mq7"]
function = 31

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert_wrap, specular_schlick_ggx;

uniform float uv_scale;
uniform sampler2D distribution_noise : source_color, repeat_enable;
uniform vec4 ground_albedo : source_color = vec4(0.639216, 0.564706, 0.486275, 1.000000);
uniform vec4 albedo_color : source_color = vec4(1.000000, 1.000000, 1.000000, 1.000000);
uniform vec4 grass_albedo : source_color = vec4(0.227451, 0.568627, 0.015686, 1.000000);



void fragment() {
// FloatParameter:17
	float n_out17p0 = uv_scale;


// Input:13
	vec2 n_out13p0 = UV;


// Input:19
	vec3 n_out19p0 = NODE_POSITION_WORLD;


// VectorOp:20
	vec2 n_out20p0 = n_out13p0 + vec2(n_out19p0.xy);


// VectorOp:21
	vec2 n_out21p0 = vec2(n_out17p0) * n_out20p0;


	vec4 n_out5p0;
// Texture2D:5
	n_out5p0 = texture(distribution_noise, n_out21p0);
	float n_out5p1 = n_out5p0.r;


// ColorParameter:14
	vec4 n_out14p0 = ground_albedo;


// ColorParameter:3
	vec4 n_out3p0 = albedo_color;


// VectorOp:15
	vec3 n_out15p0 = vec3(n_out14p0.xyz) * vec3(n_out3p0.xyz);


// FloatFunc:9
	float n_out9p0 = 1.0 - n_out5p1;


// ColorParameter:4
	vec4 n_out4p0 = grass_albedo;


// VectorOp:11
	vec3 n_out11p0 = vec3(n_out9p0) * vec3(n_out4p0.xyz);


// MultiplyAdd:10
	vec3 n_out10p0 = fma(vec3(n_out5p1), n_out15p0, n_out11p0);


// FloatConstant:16
	float n_out16p0 = 0.750000;


// FloatConstant:22
	float n_out22p0 = 0.500000;


// Output:0
	ALBEDO = n_out10p0;
	ROUGHNESS = n_out16p0;
	SPECULAR = n_out22p0;


}
"
graph_offset = Vector2(94.0656, 672.723)
modes/diffuse = 1
nodes/fragment/2/node = SubResource("VisualShaderNodeTexture2DParameter_fqepy")
nodes/fragment/2/position = Vector2(-920, 60)
nodes/fragment/3/node = SubResource("VisualShaderNodeColorParameter_7s863")
nodes/fragment/3/position = Vector2(-620, 460)
nodes/fragment/4/node = SubResource("VisualShaderNodeColorParameter_ny8ov")
nodes/fragment/4/position = Vector2(-420, 500)
nodes/fragment/5/node = SubResource("VisualShaderNodeTexture_gpugy")
nodes/fragment/5/position = Vector2(-400, 100)
nodes/fragment/9/node = SubResource("VisualShaderNodeFloatFunc_l2mq7")
nodes/fragment/9/position = Vector2(-220, 280)
nodes/fragment/10/node = SubResource("VisualShaderNodeMultiplyAdd_q1fya")
nodes/fragment/10/position = Vector2(80, 200)
nodes/fragment/11/node = SubResource("VisualShaderNodeVectorOp_7sxjs")
nodes/fragment/11/position = Vector2(-60, 420)
nodes/fragment/13/node = SubResource("VisualShaderNodeInput_06sln")
nodes/fragment/13/position = Vector2(-1360, -180)
nodes/fragment/14/node = SubResource("VisualShaderNodeColorParameter_7ek7e")
nodes/fragment/14/position = Vector2(-620, 280)
nodes/fragment/15/node = SubResource("VisualShaderNodeVectorOp_li40x")
nodes/fragment/15/position = Vector2(-400, 320)
nodes/fragment/16/node = SubResource("VisualShaderNodeFloatConstant_oh0m8")
nodes/fragment/16/position = Vector2(160, 380)
nodes/fragment/17/node = SubResource("VisualShaderNodeFloatParameter_jjd2o")
nodes/fragment/17/position = Vector2(-1140, -260)
nodes/fragment/19/node = SubResource("VisualShaderNodeInput_fs3ge")
nodes/fragment/19/position = Vector2(-1158.87, -12.4591)
nodes/fragment/20/node = SubResource("VisualShaderNodeVectorOp_q1crb")
nodes/fragment/20/position = Vector2(-920, -180)
nodes/fragment/21/node = SubResource("VisualShaderNodeVectorOp_4oe1r")
nodes/fragment/21/position = Vector2(-651.219, -112.226)
nodes/fragment/22/node = SubResource("VisualShaderNodeFloatConstant_cbhvb")
nodes/fragment/22/position = Vector2(160, 460)
nodes/fragment/connections = PackedInt32Array(2, 0, 5, 2, 5, 1, 9, 0, 5, 1, 10, 0, 10, 0, 0, 0, 9, 0, 11, 0, 4, 0, 11, 1, 11, 0, 10, 2, 14, 0, 15, 0, 3, 0, 15, 1, 15, 0, 10, 1, 16, 0, 0, 3, 13, 0, 20, 0, 19, 0, 20, 1, 17, 0, 21, 0, 20, 0, 21, 1, 21, 0, 5, 0, 22, 0, 0, 4)
